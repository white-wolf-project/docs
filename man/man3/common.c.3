.TH "Y:/Documents/ragnarok/src/common.c" 3 "Thu Mar 22 2018" "Version 0.0.1" "ragnarok" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Y:/Documents/ragnarok/src/common.c \- File containing common code used client and server\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdarg\&.h>\fP
.br
\fC#include <Python\&.h>\fP
.br
\fC#include <stdbool\&.h>\fP
.br
\fC#include <ifaddrs\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <sys/ioctl\&.h>\fP
.br
\fC#include <libxml/parser\&.h>\fP
.br
\fC#include <libxml/tree\&.h>\fP
.br
\fC#include <include/client_tool\&.h>\fP
.br
\fC#include <include/client\&.h>\fP
.br
\fC#include <include/common\&.h>\fP
.br
\fC#include 'sysnet/include/network\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBversion\fP ()"
.br
.RI "prints version informations : TOOLNAME, VERSION, DATE and TIME "
.ti -1c
.RI "void \fBdebug\fP (const char *format,\&.\&.\&.)"
.br
.RI "We call this function almost everywhere\&. But it prints to stdout/stderr only when you build the project in DEBUG mode (we use #ifdef DEBUG \&.\&.\&. #endif) "
.ti -1c
.RI "bool \fBfile_exists\fP (const char *file)"
.br
.RI "booleen function to check if a file exists "
.ti -1c
.RI "int \fBrun_python\fP (const char *pyscript)"
.br
.RI "Function based on libpyton, use to run Python 3 scripts run like this : "
.ti -1c
.RI "char * \fBget_date_and_time\fP (void)"
.br
.RI "get date and time (thank you captain obvious) This function is used in iwlist to get the time of the scan You can use it like this "
.ti -1c
.RI "char * \fBget_txt\fP (const char *str, const char *p1, const char *p2)"
.br
.RI "Find text between two patterns This function is use to check when XML start and ends Then we split log and XML Simple usage : cut useless stuff\&. "
.ti -1c
.RI "void \fBinit_xml\fP (char *docname)"
.br
.RI "Start xml process\&. Call this function once to start XML related stuff Make sure these vars are initialized\&. "
.ti -1c
.RI "void \fBend_xml\fP (char *docname)"
.br
.RI "End xml process\&. Call this function once we are done with XML related stuff\&. "
.ti -1c
.RI "int \fBget_instance_pid\fP (const char *file)"
.br
.RI "Get PID of client or server process located in a file\&. We call this function find the PID then we kill client or server process\&. "
.ti -1c
.RI "char * \fBget_wireless\fP (void)"
.br
.RI "Function to get wireless interface example usage : Create a pointer to char\&. "
.ti -1c
.RI "char * \fBget_ip\fP (const char *net_interface)"
.br
.RI "Function to get IP address of an Interface example usage : Create a pointer to char\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "xmlDocPtr \fBdoc\fP = NULL"
.br
.ti -1c
.RI "xmlNodePtr \fBroot\fP = NULL"
.br
.ti -1c
.RI "xmlNodePtr \fBdevice_AP_name\fP = NULL"
.br
.ti -1c
.RI "xmlNodePtr \fBinfo_ap\fP = NULL"
.br
.ti -1c
.RI "xmlNodePtr \fBdevice_AP_name_child\fP = NULL"
.br
.ti -1c
.RI "xmlNodePtr \fBinfo_ap_child\fP = NULL"
.br
.in -1c
.SH "Detailed Description"
.PP 
File containing common code used client and server\&. 


.PP
\fBAuthor:\fP
.RS 4
Mathieu Hautebas 
.RE
.PP
\fBDate:\fP
.RS 4
22 March 2018 
.RE
.PP

.PP
Definition in file \fBcommon\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "void debug (const char * format,  \&.\&.\&.)"

.PP
We call this function almost everywhere\&. But it prints to stdout/stderr only when you build the project in DEBUG mode (we use #ifdef DEBUG \&.\&.\&. #endif) 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP : Path or name of python script to run 
.br
\fI\&.\&.\&.\fP : like printf, which are params 
.RE
.PP
\fBReturns:\fP
.RS 4
void, no return 
.RE
.PP

.PP
Definition at line 51 of file common\&.c\&.
.SS "void end_xml (char * docname)"

.PP
End xml process\&. Call this function once we are done with XML related stuff\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdocname\fP : name or path to file we will write XML data 
.RE
.PP
\fBReturns:\fP
.RS 4
void, no return\&. 
.RE
.PP
\fBNote:\fP
.RS 4
use \fBinit_xml()\fP before this function 
.RE
.PP

.PP
Definition at line 201 of file common\&.c\&.
.SS "bool file_exists (const char * file)"

.PP
booleen function to check if a file exists 
.PP
\fBParameters:\fP
.RS 4
\fIfile\fP : Path or name of file 
.RE
.PP
\fBReturns:\fP
.RS 4
true if file exists, or false if file is not found 
.RE
.PP

.PP
Definition at line 66 of file common\&.c\&.
.SS "char* get_date_and_time (void)"

.PP
get date and time (thank you captain obvious) This function is used in iwlist to get the time of the scan You can use it like this 
.PP
.nf
printf("%s\n", get_date_and_time());

.fi
.PP
 
.PP
\fBReturns:\fP
.RS 4
curr_time; with print to stdout, output is like this : '02/03/18-15:12:32' 
.RE
.PP

.PP
Definition at line 108 of file common\&.c\&.
.SS "int get_instance_pid (const char * file)"

.PP
Get PID of client or server process located in a file\&. We call this function find the PID then we kill client or server process\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfile\fP name or path to the file containing the PID\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
pid_val which is a char but we use atoi() function to convert it to an integer\&. 
.RE
.PP
\fBNote:\fP
.RS 4
only works with one-line files 
.RE
.PP

.PP
Definition at line 219 of file common\&.c\&.
.SS "char* get_ip (const char * net_interface)"

.PP
Function to get IP address of an Interface example usage : Create a pointer to char\&. 
.PP
.nf
char *my_interface; 
.fi
.PP
 Here is how you call it 
.PP
.nf
my_interface = get_ip();
printf("interface IP is : %s\n", my_interface);

.fi
.PP
 You will have to know the network interface\&. 
.PP
\fBParameters:\fP
.RS 4
\fInet_interface\fP Network interface\&. Type : const char * 
.RE
.PP
\fBReturns:\fP
.RS 4
IP address of the network interface 
.RE
.PP
\fBSee also:\fP
.RS 4
https://stackoverflow.com/questions/2283494/get-ip-address-of-an-interface-on-linux 
.RE
.PP

.PP
Definition at line 293 of file common\&.c\&.
.SS "char* get_txt (const char * str, const char * p1, const char * p2)"

.PP
Find text between two patterns This function is use to check when XML start and ends Then we split log and XML Simple usage : cut useless stuff\&. 
.PP
.nf
char new_buf[12];
sprintf(new_buf, "%sa", buffer);
channel_out = get_txt(new_buf, "Channel:", "a");
send_data(sock, "channel : %s\n", channel_out);

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP : string to find 
.br
\fIp1\fP : first pattern 
.br
\fIp2\fP : last pattern 
.RE
.PP
\fBReturns:\fP
.RS 4
target which is the output we want or NULL if we did not find anything 
.RE
.PP
\fBNote:\fP
.RS 4
Used in the server part 
.RE
.PP

.PP
Definition at line 138 of file common\&.c\&.
.SS "char* get_wireless (void)"

.PP
Function to get wireless interface example usage : Create a pointer to char\&. 
.PP
.nf
char *my_wireless_interface; 
.fi
.PP
 Here is how you call it 
.PP
.nf
my_wireless_interface = get_wireless();
printf("wireless interface found : %s\n", my_wireless_interface);

.fi
.PP
 
.PP
\fBReturns:\fP
.RS 4
returns the first wireless interface found or NULL, if there is no interface 
.RE
.PP
\fBSee also:\fP
.RS 4
https://gist.github.com/edufelipe/6108057 
.RE
.PP
\fBWarning:\fP
.RS 4
Only tested on Linux Operating System\&. 
.RE
.PP

.PP
Definition at line 252 of file common\&.c\&.
.SS "void init_xml (char * docname)"

.PP
Start xml process\&. Call this function once to start XML related stuff Make sure these vars are initialized\&. 
.PP
.nf
xmlDocPtr doc = NULL;
xmlNodePtr root = NULL, device_AP_name = NULL, info_ap = NULL;
xmlNodePtr device_AP_name_child = NULL, info_ap_child = NULL;

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIdocname\fP : name or path to file we will write XML data 
.RE
.PP
\fBReturns:\fP
.RS 4
void, no return\&. 
.RE
.PP

.PP
Definition at line 175 of file common\&.c\&.
.SS "int run_python (const char * pyscript)"

.PP
Function based on libpyton, use to run Python 3 scripts run like this : 
.PP
.nf
run_python("file\&.py");

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIpyscript\fP : Path or name of python script to run 
.RE
.PP
\fBReturns:\fP
.RS 4
0 is everything's gone well, or -2 if Python file is not found 
.RE
.PP

.PP
Definition at line 84 of file common\&.c\&.
.SS "void version ()"

.PP
prints version informations : TOOLNAME, VERSION, DATE and TIME 
.PP
\fBReturns:\fP
.RS 4
void, no return 
.RE
.PP

.PP
Definition at line 34 of file common\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ragnarok from the source code\&.
